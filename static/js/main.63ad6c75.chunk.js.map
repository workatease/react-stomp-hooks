{"version":3,"sources":["../../src/context/StompContext.tsx","../../src/components/StompSessionProvider.tsx","../../src/hooks/useSubscription.tsx","../../src/hooks/useStompClient.tsx","App.js","../../src/hoc/withSubscription.tsx","../../src/hoc/withStompClient.tsx","index.js"],"names":["StompContext","createContext","StompSessionProvider","props","url","children","stompClientOptions","stompOptions","useState","client","setClient","subscriptionRequests","useRef","useEffect","_client","parsedUrl","URL","window","WebSocket","Error","frame","value","Object","subscribe","headers","subscriptionId","Math","subscriptionRequest","destination","callback","subscriptionData","useSubscription","stompContext","useContext","callbackRef","_destinations","Array","cleanUpFunctions","_cleanUpFunction","useStompClient","context","Subscribing","lastMessage","setLastMessage","message","body","Box","SendingMessages","input","setInput","stompClient","Grid","container","direction","spacing","item","Button","variant","onClick","publish","TextField","onChange","event","target","Typography","HigherOrderComponents","React","withStompClient","state","handleChange","bind","sendMessage","onMessage","this","setState","Component","ref","DynamicSubscription","subscribed","setSubscribed","sx","width","display","justifyContent","Showcase","Accordion","style","margin","TransitionProps","unmountOnExit","AccordionSummary","expandIcon","id","title","AccordionDetails","App","debug","str","console","log","CssBaseline","Container","Card","CardContent","ReactDOM","render","document","getElementById"],"mappings":"0SAGA,IAAMA,EAAeC,6BAArB,G,0CCkBA,SAASC,EAAqBC,GAC5B,IAAMC,EAAuDD,EAA7D,IAAWE,EAAkDF,EAA7D,SAAqBG,EAAwCH,EAA7D,mBAA4CI,E,oIAA5C,MAGA,IAAwBA,KAExB,MAA4BC,wBAA5B,GAAOC,EAAP,KAAeC,EAAf,KACMC,EAAuBC,iBAAO,IAApC,KAEAC,qBAAU,WACR,IAAMC,EAAU,IAAI,EAAJ,EAAhB,GAqCA,OAnCKP,EAAD,WAA4BA,EAAhC,mBACEO,mBAA2B,W,QACnBC,EAAY,IAAIC,IAAIZ,EAAR,yCAAaa,EAAb,6BAAaA,EAA/B,MACA,GAAIF,sBAAJ,WAAsCA,WACpC,OAAO,IAAI,EAAJ,EAAP,GACK,GACLA,oBADK,SAELA,WAEA,OAAO,IAAIG,UAAX,GACK,MAAM,IAAIC,MAAV,4BAIXL,YAAoB,SAAUM,GACxBb,EAAJ,WAA4BA,eAE5BI,mBAAqC,YACnCU,eAAqBP,YACnBO,EADmBP,YAEnBO,EAFmBP,SAGnBO,EAHFA,aAQCd,EAAL,eACEO,eAAuB,SAAUM,GAC/B,UAIJN,aACAJ,KAEO,WACLI,kBAvCK,WAyCGQ,cAzCZT,KA4EA,OACE,kBAACb,EAAD,UACEqB,MAAO,CACLZ,OADK,EAELc,UArCY,SAAC,EAAD,UAGhBC,UAAwB,IAExB,IAAMC,EAAiBC,oCAAvB,GACMC,EAAgD,CACpDC,YADoD,EAEpDC,SAFoD,EAGpDL,WAaF,OAVAb,mBAEIF,GAAUA,EAAd,YACEkB,eAAmClB,gBAAnCkB,IAOK,WACL,IAAMG,EAAmBnB,cAAzB,GAEImB,EAAJ,cACEA,6BAGFnB,wBAIJ,GChGF,SAASoB,EAAgB,EAAzB,UAGEP,UAAwB,IAExB,IAAMQ,EAAeC,qBAArB,GAEA,YAAID,EACF,MAAM,IAAIb,MAAV,gFAIF,IAAMe,EAActB,iBAApB,GACMuB,EAAgBC,mBAElB,CAFJ,GAIAF,YAEArB,qBAAU,WACR,IAAMwB,EAAN,GAcA,OAZAF,WAAsB,mBACpBE,OACEL,EAAA,aAEE,YACEE,eALc,OAYf,WACLG,WAAyB,YACvBC,UAGH,CACDhB,iBADC,WAEDA,iBAtBFT,aCtBF,SAAS0B,IACP,IAAMC,EAAUP,qBAAhB,GAIA,YAAIO,EACF,MAAM,IAAIrB,MAAV,gFAIF,OAAOqB,EAAP,O,+HCqCF,SAASC,IACP,MAAsCjC,mBAAS,2BAA/C,mBAAOkC,EAAP,KAAoBC,EAApB,KAQA,OAFAZ,EAAgB,eAAe,SAACa,GAAD,OAAaD,EAAeC,EAAQC,SAGjE,eAACC,EAAA,EAAD,4BAAoBJ,KAIxB,SAASK,IACP,MAA0BvC,mBAAS,IAAnC,mBAAOwC,EAAP,KAAcC,EAAd,KACA,EAAsCzC,mBAAS,2BAA/C,mBAAOkC,EAAP,KAAoBC,EAApB,KAIMO,EAAcX,IACpBR,EAAgB,yBAAyB,SAACa,GAAD,OAAaD,EAAeC,EAAQC,SAU7E,OACE,eAACM,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAzC,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SAAW,cAACC,EAAA,EAAD,CAAQC,QAAS,YAAaC,QAVzB,WAElBR,EAAYS,QAAQ,CAClB/B,YAAa,YACbiB,KAAM,QAAUG,KAML,4BACX,cAACG,EAAA,EAAD,CAAMI,MAAI,EAAV,SAAW,cAACK,EAAA,EAAD,CAAWH,QAAQ,WAAWpC,MAAO2B,EAC1Ba,SAAW,SAAAC,GAAK,OAAIb,EAASa,EAAMC,OAAO1C,YAChE,cAAC8B,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAACS,EAAA,EAAD,CAAYP,QAAS,QAArB,oCAC0Bf,UAOlC,IC1FA,MD0FMuB,EEhGN,YACE,OAAO,YACL,IAAMf,EAAcX,IACpB,OAAO2B,mCAAkBhB,YAAaA,GAAtC,KF6F0BiB,EC1F9B,ED0F8D,kDAG1D,WAAYhE,GAAQ,IAAD,8BACjB,cAAMA,IAGD+C,YAAc/C,EAAM+C,YACzB,EAAKkB,MAAQ,CACXpB,MAAO,GACPN,YAAa,2BAGf,EAAK2B,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBAZA,EAHuC,6CAmB1D,SAAU1B,GACR6B,KAAKC,SAAS,CACZhC,YAAaE,EAAQC,SArBiC,yBAyB1D,WACE4B,KAAKvB,YAAYS,QAAQ,CACvB/B,YAAa,YACbiB,KAAM,QAAU4B,KAAKL,MAAMpB,UA5B2B,0BAgC1D,SAAac,GACXW,KAAKC,SAAS,CACZ1B,MAAOc,EAAMC,OAAO1C,UAlCkC,oBAsC1D,WACE,OACE,eAAC8B,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAzC,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SAAW,cAACC,EAAA,EAAD,CAAQC,QAAS,YAAaC,QAASe,KAAKF,YAA5C,4BACX,cAACpB,EAAA,EAAD,CAAMI,MAAI,EAAV,SAAW,cAACK,EAAA,EAAD,CAAWH,QAAQ,WAAWpC,MAAOoD,KAAKL,MAAMpB,MAAOa,SAAUY,KAAKJ,iBACjF,cAAClB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAACS,EAAA,EAAD,CAAYP,QAAS,QAArB,oCAC0BgB,KAAKL,MAAM1B,wBA7Ca,GACtCwB,IAAMS,WC3F9B,ED6IK,6BC1IHnD,UAAwB,IAEjB,YACL,IAAMoD,EAAMhE,mBAUZ,OATAmB,EAAgB,GAEd,YACM6C,EAAJ,SAAiBA,yBAHrB7C,GASOmC,mCAAkBU,IAAKA,GAA9B,ODgIJ,SAASC,IACP,MAAsCrE,mBAAS,2BAA/C,mBAAOkC,EAAP,KAAoBC,EAApB,KACA,EAAoCnC,oBAAS,GAA7C,mBAAOsE,EAAP,KAAmBC,EAAnB,KAQA,OANAhD,EAEE+C,EAAa,CAAC,eAAiB,IAC/B,SAAClC,GAAD,OAAaD,EAAeC,EAAQC,SAIpC,eAACC,EAAA,EAAD,CAAKkC,GAAI,CAACC,MAAO,OAAQC,QAAS,OAAQC,eAAgB,iBAA1D,UACE,eAACrC,EAAA,EAAD,4BAAoBJ,KACpB,cAACI,EAAA,EAAD,UACE,cAACU,EAAA,EAAD,CAAQE,QAAS,kBAAMqB,GAAeD,IAAtC,SAAoDA,EAAa,cAAgB,mBAMzF,SAASM,EAASjF,GAChB,OACE,eAACkF,EAAA,EAAD,CAAWC,MAAO,CAAEC,OAAQ,OAASC,gBAAiB,CAAEC,eAAe,GAAvE,UACE,cAACC,EAAA,EAAD,CACEC,WAAY,cAAC,IAAD,IACZ,gBAAc,kBACdC,GAAG,iBAHL,SAKE,cAAC5B,EAAA,EAAD,UAAa7D,EAAM0F,UAErB,cAACC,EAAA,EAAD,UACG3F,EAAME,cAMA0F,MApKH,WACV,OAGE,cAFA,CAEC7F,EAAD,CACEE,IAAK,qCAEL4F,MAAO,SAACC,GACNC,QAAQC,IAAIF,IAJhB,UAOE,cAACG,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAMhB,MAAO,CAAEC,OAAQ,OAAS9B,QAAQ,WAAxC,SACE,eAAC8C,EAAA,EAAD,WACE,cAACvC,EAAA,EAAD,sFACA,cAACA,EAAA,EAAD,iKAGJ,cAACoB,EAAD,CAAUS,MAAO,cAAjB,SAAgC,cAACpD,EAAD,MAChC,cAAC2C,EAAD,CAAUS,MAAO,mBAAjB,SAAqC,cAAC9C,EAAD,MACrC,cAACqC,EAAD,CAAUS,MAAO,0BAAjB,SAA4C,cAAC5B,EAAD,MAC5C,cAACmB,EAAD,CAAUS,MAAO,oCAAjB,SAAsD,cAAChB,EAAD,aG1C9D2B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.63ad6c75.chunk.js","sourcesContent":["import { createContext } from 'react';\nimport { StompSessionProviderContext } from '../interfaces/StompSessionProviderContext';\n\nconst StompContext = createContext<StompSessionProviderContext | undefined>(\n  undefined\n);\n\nexport default StompContext;\n","import React, { useEffect, useRef, useState } from 'react';\nimport StompContext from '../context/StompContext';\nimport SockJS from 'sockjs-client';\nimport {\n  Client,\n  IStompSocket,\n  messageCallbackType,\n  StompHeaders\n} from '@stomp/stompjs';\nimport { StompSessionProviderProps } from '../interfaces/StompSessionProviderProps';\nimport { StompSessionSubscription } from '../interfaces/StompSessionSubscription';\n\n/**\n * The StompSessionProvider manages the STOMP connection\n * All Hooks and HOCs in this library require an ancestor of this type.\n * The URL to connect to can be specified via the url prop.\n * Depending on the Schema of the URL either Sockjs or a raw Websocket is used.\n * You can override this behavior with the brokerURL or webSocketFactory props, which will then be forwarded to @stomp/stompjs\n * Custom @stomp/stompjs options can be used as props.\n * Please consult the @stomp/stompjs documentation for more information.\n */\nfunction StompSessionProvider(props: StompSessionProviderProps) {\n  let { url, children, stompClientOptions, ...stompOptions } = props;\n\n  // Support old API\n  if (stompClientOptions) stompOptions = stompClientOptions;\n\n  const [client, setClient] = useState<Client | undefined>(undefined);\n  const subscriptionRequests = useRef(new Map());\n\n  useEffect(() => {\n    const _client = new Client(stompOptions);\n\n    if (!stompOptions.brokerURL && !stompOptions.webSocketFactory) {\n      _client.webSocketFactory = function () {\n        const parsedUrl = new URL(url, window?.location?.href);\n        if (parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:') {\n          return new SockJS(url) as IStompSocket;\n        } else if (\n          parsedUrl.protocol === 'ws:' ||\n          parsedUrl.protocol === 'wss:'\n        ) {\n          return new WebSocket(url) as IStompSocket;\n        } else throw new Error('Protocol not supported');\n      };\n    }\n\n    _client.onConnect = function (frame) {\n      if (stompOptions.onConnect) stompOptions.onConnect(frame);\n\n      subscriptionRequests.current.forEach((value) => {\n        value.subscription = _client.subscribe(\n          value.destination,\n          value.callback,\n          value.headers\n        );\n      });\n    };\n\n    if (!stompOptions.onStompError) {\n      _client.onStompError = function (frame) {\n        throw frame;\n      };\n    }\n\n    _client.activate();\n    setClient(_client);\n\n    return () => {\n      _client.deactivate();\n    };\n  }, [url, ...Object.values(stompOptions)]);\n\n  const subscribe = (\n    destination: string,\n    callback: messageCallbackType,\n    headers: StompHeaders = {}\n  ) => {\n    const subscriptionId = Math.random().toString(36).substr(2, 9);\n    const subscriptionRequest: StompSessionSubscription = {\n      destination,\n      callback,\n      headers\n    };\n\n    subscriptionRequests.current.set(subscriptionId, subscriptionRequest);\n\n    if (client && client.connected) {\n      subscriptionRequest.subscription = client.subscribe(\n        destination,\n        callback,\n        headers\n      );\n    }\n\n    return () => {\n      const subscriptionData = subscriptionRequests.current.get(subscriptionId);\n\n      if (subscriptionData.subscription) {\n        subscriptionData.subscription.unsubscribe();\n      }\n\n      subscriptionRequests.current.delete(subscriptionId);\n    };\n  };\n\n  return (\n    <StompContext.Provider\n      value={{\n        client,\n        subscribe\n      }}\n    >\n      {children}\n    </StompContext.Provider>\n  );\n}\n\nexport default StompSessionProvider;\n","import { useContext, useEffect, useRef } from 'react';\nimport StompContext from '../context/StompContext';\nimport { messageCallbackType, StompHeaders } from '@stomp/stompjs';\n\n/**\n *\n * @param destinations The destinations to subscribe to. Can be a string for a single destination or an array of strings for multiple.\n * @param onMessage Callback called when a message arrives for this subscription\n * @param headers Additional Headers for this subscription, consult @stomp/stompjs docs.\n */\nfunction useSubscription(\n  destinations: string | string[],\n  onMessage: messageCallbackType,\n  headers: StompHeaders = {}\n) {\n  const stompContext = useContext(StompContext);\n\n  if (stompContext === undefined)\n    throw new Error(\n      'There must be a StompSessionProvider as Ancestor of all Stomp Hooks and HOCs'\n    );\n\n  const callbackRef = useRef<messageCallbackType>(onMessage);\n  const _destinations = Array.isArray(destinations)\n    ? destinations\n    : [destinations];\n\n  callbackRef.current = onMessage;\n\n  useEffect(() => {\n    const cleanUpFunctions: (() => void)[] = [];\n\n    _destinations.forEach((_destination) =>\n      cleanUpFunctions.push(\n        stompContext.subscribe(\n          _destination,\n          (message) => {\n            callbackRef.current(message);\n          },\n          headers\n        )\n      )\n    );\n\n    return () => {\n      cleanUpFunctions.forEach((_cleanUpFunction) => {\n        _cleanUpFunction();\n      });\n    };\n  }, [\n    Object.values(_destinations).toString(),\n    Object.values(headers).toString()\n  ]);\n}\n\nexport default useSubscription;\n","import { useContext } from 'react';\nimport StompContext from '../context/StompContext';\nimport { StompSessionProviderContext } from '../interfaces/StompSessionProviderContext';\n\n/**\n * Returns the Stomp Client from @stomp/stompjs\n */\nfunction useStompClient() {\n  const context = useContext<StompSessionProviderContext | undefined>(\n    StompContext\n  );\n\n  if (context === undefined)\n    throw new Error(\n      'There must be a StompSessionProvider as Ancestor of all Stomp Hooks and HOCs'\n    );\n\n  return context.client;\n}\n\nexport default useStompClient;\n","import React, { useState } from \"react\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport {\n  StompSessionProvider,\n  useStompClient,\n  useSubscription,\n  withStompClient,\n  withSubscription\n} from \"react-stomp-hooks\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Container,\n  Grid,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nconst App = () => {\n  return (\n    //Initialize Stomp connection, will use sockjs, as the protocol specified is https\n    //The Connection can be used by all child components via the hooks or hocs.\n    <StompSessionProvider\n      url={\"https://stream.elite12.de/api/sock\"}\n      //All options supported by @stomp/stompjs can be used here\n      debug={(str) => {\n        console.log(str);\n      }}\n    >\n      <CssBaseline />\n      <Container>\n        <Card style={{ margin: \"3em\" }} variant=\"outlined\">\n          <CardContent>\n            <Typography>You can see the STOMP Messages send and received in the browser console</Typography>\n            <Typography>Note that, because the components are unmounted when the accordion is unexpanded, all subscriptions are removed when you close the accordion.</Typography>\n          </CardContent>\n        </Card>\n        <Showcase title={\"Subscribing\"}><Subscribing /></Showcase>\n        <Showcase title={\"Sending Messages\"}><SendingMessages /></Showcase>\n        <Showcase title={\"Higher Order Components\"}><HigherOrderComponents /></Showcase>\n        <Showcase title={\"Dynamic subscribing/unsubscribing\"}><DynamicSubscription /></Showcase>\n      </Container>\n    </StompSessionProvider>\n  );\n};\n\nfunction Subscribing() {\n  const [lastMessage, setLastMessage] = useState(\"No message received yet\");\n\n  //Subscribe to /topic/test, and use handler for all received messages\n  //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n  //If the STOMP connection itself is lost they are however restored on reconnect.\n  //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n  useSubscription(\"/topic/test\", (message) => setLastMessage(message.body));\n\n  return (\n    <Box>Last Message: {lastMessage}</Box>\n  );\n}\n\nfunction SendingMessages() {\n  const [input, setInput] = useState(\"\");\n  const [lastMessage, setLastMessage] = useState(\"No message received yet\");\n\n  //Get Instance of StompClient\n  //This is the StompCLient from @stomp/stompjs\n  const stompClient = useStompClient();\n  useSubscription(\"/user/queue/echoreply\", (message) => setLastMessage(message.body));\n\n  const sendMessage = () => {\n    //Send Message\n    stompClient.publish({\n      destination: \"/app/echo\",\n      body: \"Echo \" + input\n    });\n  };\n\n  return (\n    <Grid container direction=\"row\" spacing={3}>\n      <Grid item><Button variant={\"contained\"} onClick={sendMessage}>Send Message</Button></Grid>\n      <Grid item><TextField variant=\"standard\" value={input}\n                            onChange={(event => setInput(event.target.value))} /></Grid>\n      <Grid item>\n        <Typography variant={\"body1\"}>\n          Last Message received: {lastMessage}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst HigherOrderComponents = withStompClient(withSubscription(\n  class HOCDemo extends React.Component {\n\n    constructor(props) {\n      super(props);\n\n      //stompCLient property is injected in the withStompClient HOC\n      this.stompClient = props.stompClient;\n      this.state = {\n        input: \"\",\n        lastMessage: \"No message received yet\"\n      };\n\n      this.handleChange = this.handleChange.bind(this);\n      this.sendMessage = this.sendMessage.bind(this);\n      this.onMessage = this.onMessage.bind(this);\n    }\n\n    //You have to specify an onMessage method for the withSubscription HOC.\n    onMessage(message) {\n      this.setState({\n        lastMessage: message.body\n      });\n    }\n\n    sendMessage() {\n      this.stompClient.publish({\n        destination: \"/app/echo\",\n        body: \"Echo \" + this.state.input\n      });\n    }\n\n    handleChange(event) {\n      this.setState({\n        input: event.target.value\n      });\n    }\n\n    render() {\n      return (\n        <Grid container direction=\"row\" spacing={3}>\n          <Grid item><Button variant={\"contained\"} onClick={this.sendMessage}>Send Message</Button></Grid>\n          <Grid item><TextField variant=\"standard\" value={this.state.input} onChange={this.handleChange} /></Grid>\n          <Grid item>\n            <Typography variant={\"body1\"}>\n              Last Message received: {this.state.lastMessage}\n            </Typography>\n          </Grid>\n        </Grid>\n      );\n    }\n  }, \"/user/queue/echoreply\")\n);\n\nfunction DynamicSubscription() {\n  const [lastMessage, setLastMessage] = useState(\"No message received yet\");\n  const [subscribed, setSubscribed] = useState(false);\n\n  useSubscription(\n    //The value of the first parameter can be mutated to dynamically subscribe/unsubscribe from topics\n    subscribed ? [\"/topic/test\"] : [],\n    (message) => setLastMessage(message.body)\n  );\n\n  return (\n    <Box sx={{width: '100%', display: 'flex', justifyContent: 'space-between'}}>\n      <Box>Last Message: {lastMessage}</Box>\n      <Box>\n        <Button onClick={() => setSubscribed(!subscribed)}>{subscribed ? \"Unsubscribe\" : \"Subscribe\"}</Button>\n      </Box>\n    </Box>\n  );\n}\n\nfunction Showcase(props) {\n  return (\n    <Accordion style={{ margin: \"3em\" }} TransitionProps={{ unmountOnExit: true }}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography>{props.title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        {props.children}\n      </AccordionDetails>\n    </Accordion>\n  );\n}\n\nexport default App;\n","import React, { useRef } from 'react';\nimport useSubscription from '../hooks/useSubscription';\nimport { StompHeaders } from '@stomp/stompjs';\nimport {\n  MessageReceiverInterface,\n  StompMessageReceiver\n} from '../interfaces/StompMessageReceiver';\nimport { IMessage } from '@stomp/stompjs/esm6/i-message';\n\nfunction withSubscription<P>(\n  WrappedComponent: StompMessageReceiver<P>,\n  destinations: string | string[],\n  headers: StompHeaders = {}\n) {\n  return (props: P) => {\n    const ref = useRef<MessageReceiverInterface>();\n    useSubscription(\n      destinations,\n      (message: IMessage) => {\n        if (ref.current) ref.current.onMessage(message);\n      },\n      headers\n    );\n\n    // @ts-ignore\n    return <WrappedComponent ref={ref} {...props} />;\n  };\n}\n\nexport default withSubscription;\n","import React from 'react';\nimport useStompClient from '../hooks/useStompClient';\n\nfunction withStompClient<P>(WrappedComponent: React.ComponentType<P>) {\n  return (props: P) => {\n    const stompClient = useStompClient();\n    return <WrappedComponent stompClient={stompClient} {...props} />;\n  };\n}\n\nexport default withStompClient;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}