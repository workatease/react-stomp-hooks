{"version":3,"sources":["../../src/context/StompContext.tsx","../../src/components/StompSessionProvider.tsx","../../src/hooks/useSubscription.tsx","../../src/hooks/useStompClient.tsx","../../src/mock/subscriptions.tsx","../../src/mock/client.tsx","App.js","../../src/hoc/withStompClient.tsx","../../src/hoc/withSubscription.tsx","index.js"],"names":["StompContext","createContext","undefined","StompSessionProvider","props","url","children","stompClientOptions","stompOptions","_objectWithoutPropertiesLoose","useState","client","setClient","subscriptionRequests","useRef","Map","useEffect","_client","Client","brokerURL","webSocketFactory","parsedUrl","URL","window","_window","location","_window$location","href","protocol","SockJS","WebSocket","Error","onConnect","frame","current","forEach","value","subscription","subscribe","destination","callback","headers","onStompError","activate","deactivate","Object","values","React","Provider","subscriptionId","Math","random","toString","substr","subscriptionRequest","set","connected","subscriptionData","get","unsubscribe","delete","useSubscription","destinations","onMessage","stompContext","useContext","callbackRef","_destinations","Array","isArray","cleanUpFunctions","_destination","push","message","_cleanUpFunction","useStompClient","context","App","debug","str","console","log","CssBaseline","Container","Card","style","margin","variant","CardContent","Typography","Showcase","title","Subscribing","SendingMessages","HigherOrderComponents","DynamicSubscription","lastMessage","setLastMessage","body","Box","input","setInput","stompClient","Grid","container","direction","spacing","item","Button","onClick","publish","TextField","onChange","event","target","WrappedComponent","ref","withSubscription","state","handleChange","bind","sendMessage","this","setState","Component","subscribed","setSubscribed","sx","width","display","justifyContent","Accordion","TransitionProps","unmountOnExit","AccordionSummary","expandIcon","id","AccordionDetails","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74541355.chunk.js","sourcesContent":["import { createContext } from 'react';\nimport { StompSessionProviderContext } from '../interfaces/StompSessionProviderContext';\n\nconst StompContext = createContext<StompSessionProviderContext | undefined>(\n  undefined\n);\n\nexport default StompContext;\n","import React, { useEffect, useRef, useState } from 'react';\nimport StompContext from '../context/StompContext';\nimport SockJS from 'sockjs-client';\nimport {\n  Client,\n  IStompSocket,\n  messageCallbackType,\n  StompHeaders\n} from '@stomp/stompjs';\nimport { StompSessionProviderProps } from '../interfaces/StompSessionProviderProps';\nimport { StompSessionSubscription } from '../interfaces/StompSessionSubscription';\n\n/**\n * The StompSessionProvider manages the STOMP connection\n * All Hooks and HOCs in this library require an ancestor of this type.\n * The URL to connect to can be specified via the url prop.\n * Depending on the Schema of the URL either Sockjs or a raw Websocket is used.\n * You can override this behavior with the brokerURL or webSocketFactory props, which will then be forwarded to @stomp/stompjs\n * Custom @stomp/stompjs options can be used as props.\n * Please consult the @stomp/stompjs documentation for more information.\n */\nfunction StompSessionProvider(props: StompSessionProviderProps) {\n  let { url, children, stompClientOptions, ...stompOptions } = props;\n\n  // Support old API\n  if (stompClientOptions) stompOptions = stompClientOptions;\n\n  const [client, setClient] = useState<Client | undefined>(undefined);\n  const subscriptionRequests = useRef(new Map());\n\n  useEffect(() => {\n    const _client = new Client(stompOptions);\n\n    if (!stompOptions.brokerURL && !stompOptions.webSocketFactory) {\n      _client.webSocketFactory = function () {\n        const parsedUrl = new URL(url, window?.location?.href);\n        if (parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:') {\n          return new SockJS(url) as IStompSocket;\n        } else if (\n          parsedUrl.protocol === 'ws:' ||\n          parsedUrl.protocol === 'wss:'\n        ) {\n          return new WebSocket(url) as IStompSocket;\n        } else throw new Error('Protocol not supported');\n      };\n    }\n\n    _client.onConnect = function (frame) {\n      if (stompOptions.onConnect) stompOptions.onConnect(frame);\n\n      subscriptionRequests.current.forEach((value) => {\n        value.subscription = _client.subscribe(\n          value.destination,\n          value.callback,\n          value.headers\n        );\n      });\n    };\n\n    if (!stompOptions.onStompError) {\n      _client.onStompError = function (frame) {\n        throw frame;\n      };\n    }\n\n    _client.activate();\n    setClient(_client);\n\n    return () => {\n      _client.deactivate();\n    };\n  }, [url, ...Object.values(stompOptions)]);\n\n  const subscribe = (\n    destination: string,\n    callback: messageCallbackType,\n    headers: StompHeaders = {}\n  ) => {\n    const subscriptionId = Math.random().toString(36).substr(2, 9);\n    const subscriptionRequest: StompSessionSubscription = {\n      destination,\n      callback,\n      headers\n    };\n\n    subscriptionRequests.current.set(subscriptionId, subscriptionRequest);\n\n    if (client && client.connected) {\n      subscriptionRequest.subscription = client.subscribe(\n        destination,\n        callback,\n        headers\n      );\n    }\n\n    return () => {\n      const subscriptionData = subscriptionRequests.current.get(subscriptionId);\n\n      if (subscriptionData.subscription) {\n        subscriptionData.subscription.unsubscribe();\n      }\n\n      subscriptionRequests.current.delete(subscriptionId);\n    };\n  };\n\n  return (\n    <StompContext.Provider\n      value={{\n        client,\n        subscribe\n      }}\n    >\n      {children}\n    </StompContext.Provider>\n  );\n}\n\nexport default StompSessionProvider;\n","import { useContext, useEffect, useRef } from 'react';\nimport StompContext from '../context/StompContext';\nimport { messageCallbackType, StompHeaders } from '@stomp/stompjs';\n\n/**\n *\n * @param destinations The destinations to subscribe to. Can be a string for a single destination or an array of strings for multiple.\n * @param onMessage Callback called when a message arrives for this subscription\n * @param headers Additional Headers for this subscription, consult @stomp/stompjs docs.\n */\nfunction useSubscription(\n  destinations: string | string[],\n  onMessage: messageCallbackType,\n  headers: StompHeaders = {}\n) {\n  const stompContext = useContext(StompContext);\n\n  if (stompContext === undefined)\n    throw new Error(\n      'There must be a StompSessionProvider as Ancestor of all Stomp Hooks and HOCs'\n    );\n\n  const callbackRef = useRef<messageCallbackType>(onMessage);\n  const _destinations = Array.isArray(destinations)\n    ? destinations\n    : [destinations];\n\n  callbackRef.current = onMessage;\n\n  useEffect(() => {\n    const cleanUpFunctions: (() => void)[] = [];\n\n    _destinations.forEach((_destination) =>\n      cleanUpFunctions.push(\n        stompContext.subscribe(\n          _destination,\n          (message) => {\n            callbackRef.current(message);\n          },\n          headers\n        )\n      )\n    );\n\n    return () => {\n      cleanUpFunctions.forEach((_cleanUpFunction) => {\n        _cleanUpFunction();\n      });\n    };\n  }, [\n    Object.values(_destinations).toString(),\n    Object.values(headers).toString()\n  ]);\n}\n\nexport default useSubscription;\n","import { useContext } from 'react';\nimport StompContext from '../context/StompContext';\nimport { StompSessionProviderContext } from '../interfaces/StompSessionProviderContext';\n\n/**\n * Returns the Stomp Client from @stomp/stompjs\n */\nfunction useStompClient() {\n  const context = useContext<StompSessionProviderContext | undefined>(\n    StompContext\n  );\n\n  if (context === undefined)\n    throw new Error(\n      'There must be a StompSessionProvider as Ancestor of all Stomp Hooks and HOCs'\n    );\n\n  return context.client;\n}\n\nexport default useStompClient;\n","import { IMessage } from '@stomp/stompjs/src/i-message';\nimport { messageCallbackType, StompHeaders } from '@stomp/stompjs';\n\nexport const subscriptions = new Map<string, Map<string, Function>>();\n\nexport function subscribeMock(\n  destination: string,\n  callback: messageCallbackType,\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  headers: StompHeaders = {}\n) {\n  const subscriptionId = Math.random().toString(36).substr(2, 9);\n\n  if (!subscriptions.has(destination)) {\n    subscriptions.set(destination, new Map<string, Function>());\n  }\n\n  // @ts-ignore\n  subscriptions.get(destination).set(subscriptionId, callback);\n\n  return () => {\n    // @ts-ignore\n    subscriptions.get(destination).delete(subscriptionId);\n  };\n}\n\n/**\n * Simulates receiving a message from the server to the specified destination\n * @param destination The topic to send the message to\n * @param message The message to send\n */\nexport function mockReceiveMessage(\n  destination: string,\n  message: IMessage\n): void {\n  if (subscriptions.has(destination)) {\n    // @ts-ignore\n    subscriptions.get(destination).forEach((callback: Function) => {\n      callback(message);\n    });\n  }\n}\n\n/**\n * Gets the current subscriptions for the specified destination\n * @param destination The topic to get the subscriptions for, or undefined to get all subscriptions\n */\nexport function getMockSubscriptions(destination?: string) {\n  if (destination) {\n    return subscriptions.get(destination);\n  }\n  return subscriptions;\n}\n","import { IPublishParams } from '@stomp/stompjs';\n\nexport const messages = new Map<string, Array<IPublishParams>>();\n\n/**\n * A mock implementation of the publish function of the @stomp/stompjs client.\n * Will store the messages in a map, keyed by the destination.\n * @param params\n */\nexport function mockClientPublish(params: IPublishParams) {\n  if (!messages.has(params.destination)) {\n    messages.set(params.destination, []);\n  }\n\n  // @ts-ignore\n  messages.get(params.destination).push(params);\n}\n\n/**\n * Gets a default Mock of the @stomp/stompjs client.\n * If you require a custom client, you can use this as a base.\n */\nexport function getMockClient() {\n  return {\n    publish: mockClientPublish\n  };\n}\n\n/**\n * Gets all messages which have been sent via a mock client.\n * @param destination The destination to get messages for, or undefined to get all messages.\n */\nexport function getSentMockMessages(destination?: string) {\n  if (destination) {\n    return messages.get(destination);\n  }\n  return messages;\n}\n","import React, { useState } from \"react\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport {\n  StompSessionProvider,\n  useStompClient,\n  useSubscription,\n  withStompClient,\n  withSubscription\n} from \"react-stomp-hooks\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Container,\n  Grid,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nexport function App() {\n  return (\n    //Initialize Stomp connection, will use sockjs, as the protocol specified is https\n    //The Connection can be used by all child components via the hooks or hocs.\n    <StompSessionProvider\n      url={\"https://stream.elite12.de/api/sock\"}\n      //All options supported by @stomp/stompjs can be used here\n      debug={(str) => {\n        console.log(str);\n      }}\n    >\n      <CssBaseline />\n      <Container>\n        <Card style={{ margin: \"3em\" }} variant=\"outlined\">\n          <CardContent>\n            <Typography>You can see the STOMP Messages send and received in the browser console</Typography>\n            <Typography>Note that, because the components are unmounted when the accordion is unexpanded, all subscriptions are removed when you close the accordion.</Typography>\n          </CardContent>\n        </Card>\n        <Showcase title={\"Subscribing\"}><Subscribing /></Showcase>\n        <Showcase title={\"Sending Messages\"}><SendingMessages /></Showcase>\n        <Showcase title={\"Higher Order Components\"}><HigherOrderComponents /></Showcase>\n        <Showcase title={\"Dynamic subscribing/unsubscribing\"}><DynamicSubscription /></Showcase>\n      </Container>\n    </StompSessionProvider>\n  );\n}\n\nexport function Subscribing() {\n  const [lastMessage, setLastMessage] = useState(\"No message received yet\");\n\n  //Subscribe to /topic/test, and use handler for all received messages\n  //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n  //If the STOMP connection itself is lost they are however restored on reconnect.\n  //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n  useSubscription(\"/topic/test\", (message) => setLastMessage(message.body));\n\n  return (\n    <Box>Last Message: {lastMessage}</Box>\n  );\n}\n\nexport function SendingMessages() {\n  const [input, setInput] = useState(\"\");\n  const [lastMessage, setLastMessage] = useState(\"No message received yet\");\n\n  //Get Instance of StompClient\n  //This is the StompCLient from @stomp/stompjs\n  const stompClient = useStompClient();\n  useSubscription(\"/user/queue/echoreply\", (message) => setLastMessage(message.body));\n\n  const sendMessage = () => {\n    //Send Message\n    stompClient.publish({\n      destination: \"/app/echo\",\n      body: \"Echo \" + input\n    });\n  };\n\n  return (\n    <Grid container direction=\"row\" spacing={3}>\n      <Grid item><Button variant={\"contained\"} onClick={sendMessage}>Send Message</Button></Grid>\n      <Grid item><TextField variant=\"standard\" value={input}\n                            onChange={(event => setInput(event.target.value))} /></Grid>\n      <Grid item>\n        <Typography variant={\"body1\"}>\n          Last Message received: {lastMessage}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport const HigherOrderComponents = withStompClient(withSubscription(\n  class HOCDemo extends React.Component {\n\n    constructor(props) {\n      super(props);\n\n      //stompCLient property is injected in the withStompClient HOC\n      this.stompClient = props.stompClient;\n      this.state = {\n        input: \"\",\n        lastMessage: \"No message received yet\"\n      };\n\n      this.handleChange = this.handleChange.bind(this);\n      this.sendMessage = this.sendMessage.bind(this);\n      this.onMessage = this.onMessage.bind(this);\n    }\n\n    //You have to specify an onMessage method for the withSubscription HOC.\n    onMessage(message) {\n      this.setState({\n        lastMessage: message.body\n      });\n    }\n\n    sendMessage() {\n      this.stompClient.publish({\n        destination: \"/app/echo\",\n        body: \"Echo \" + this.state.input\n      });\n    }\n\n    handleChange(event) {\n      this.setState({\n        input: event.target.value\n      });\n    }\n\n    render() {\n      return (\n        <Grid container direction=\"row\" spacing={3}>\n          <Grid item><Button variant={\"contained\"} onClick={this.sendMessage}>Send Message</Button></Grid>\n          <Grid item><TextField variant=\"standard\" value={this.state.input} onChange={this.handleChange} /></Grid>\n          <Grid item>\n            <Typography variant={\"body1\"}>\n              Last Message received: {this.state.lastMessage}\n            </Typography>\n          </Grid>\n        </Grid>\n      );\n    }\n  }, \"/user/queue/echoreply\")\n);\n\nexport function DynamicSubscription() {\n  const [lastMessage, setLastMessage] = useState(\"No message received yet\");\n  const [subscribed, setSubscribed] = useState(false);\n\n  useSubscription(\n    //The value of the first parameter can be mutated to dynamically subscribe/unsubscribe from topics\n    subscribed ? [\"/topic/test\"] : [],\n    (message) => setLastMessage(message.body)\n  );\n\n  return (\n    <Box sx={{width: '100%', display: 'flex', justifyContent: 'space-between'}}>\n      <Box>Last Message: {lastMessage}</Box>\n      <Box>\n        <Button onClick={() => setSubscribed(!subscribed)}>{subscribed ? \"Unsubscribe\" : \"Subscribe\"}</Button>\n      </Box>\n    </Box>\n  );\n}\n\nexport function Showcase(props) {\n  return (\n    <Accordion style={{ margin: \"3em\" }} TransitionProps={{ unmountOnExit: true }}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography>{props.title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        {props.children}\n      </AccordionDetails>\n    </Accordion>\n  );\n}\n","import React from 'react';\nimport useStompClient from '../hooks/useStompClient';\n\nfunction withStompClient<P>(WrappedComponent: React.ComponentType<P>) {\n  return (props: P) => {\n    const stompClient = useStompClient();\n    return <WrappedComponent stompClient={stompClient} {...props} />;\n  };\n}\n\nexport default withStompClient;\n","import React, { useRef } from 'react';\nimport useSubscription from '../hooks/useSubscription';\nimport { StompHeaders } from '@stomp/stompjs';\nimport {\n  MessageReceiverInterface,\n  StompMessageReceiver\n} from '../interfaces/StompMessageReceiver';\nimport { IMessage } from '@stomp/stompjs/esm6/i-message';\n\nfunction withSubscription<P>(\n  WrappedComponent: StompMessageReceiver<P>,\n  destinations: string | string[],\n  headers: StompHeaders = {}\n) {\n  return (props: P) => {\n    const ref = useRef<MessageReceiverInterface>();\n    useSubscription(\n      destinations,\n      (message: IMessage) => {\n        if (ref.current) ref.current.onMessage(message);\n      },\n      headers\n    );\n\n    // @ts-ignore\n    return <WrappedComponent ref={ref} {...props} />;\n  };\n}\n\nexport default withSubscription;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}